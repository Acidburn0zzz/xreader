#!/usr/bin/python3

import sys
import gi
import subprocess

gi.require_version('Gtk', '3.0')
gi.require_version('EvinceDocument', '3.0')
gi.require_version('EvinceView', '3.0')

from gi.repository import Gtk
from gi.repository import EvinceDocument
from gi.repository import EvinceView

import gettext
gettext.install("xreader", "/usr/share/locale")

class XReader:

    def __init__(self):

        # Load the UI
        self.builder = Gtk.Builder()
        self.builder.set_translation_domain("xreader")
        self.builder.add_from_file("/usr/share/xreader/pyxreader.ui")
        for widget in self.builder.get_objects():
            name = Gtk.Buildable.get_name(widget)
            setattr(self, name, widget)

        # Connect widget signals (do this here rather than in Glade where regressions aren't as visible)
        self.toolbutton_prev.connect("clicked", self.on_button_prev_clicked)
        self.toolbutton_next.connect("clicked", self.on_button_next_clicked)
        self.menuitem_open.connect("activate", self.on_menuitem_open_activated)
        self.menuitem_prev.connect("activate", self.on_menuitem_prev_activated)
        self.menuitem_next.connect("activate", self.on_menuitem_next_activated)
        self.menuitem_first.connect("activate", self.on_menuitem_first_activated)
        self.menuitem_last.connect("activate", self.on_menuitem_last_activated)
        self.menuitem_inverted_colors.connect("activate", self.on_menuitem_inverted_colors_activated)
        self.menuitem_continuous.connect("activate", self.on_menuitem_continuous_activated)
        self.menuitem_dual.connect("activate", self.on_menuitem_dual_activated)
        self.menuitem_odd_left.connect("activate", self.on_menuitem_odd_left_activated)
        self.menuitem_help.connect("activate", self.on_menuitem_help_activated)
        self.menuitem_about.connect("activate", self.on_menuitem_about_activated)
        self.menuitem_reload.connect("activate", self.on_menuitem_reload_activated)
        self.menuitem_save.connect("activate", self.on_menuitem_save_activated)

        self.menuitem_zoom_in.connect("activate", self.on_menuitem_zoom_in_activated)
        self.menuitem_zoom_out.connect("activate", self.on_menuitem_zoom_out_activated)

        self.menuitem_best_fit.connect("activate", self.on_menuitem_best_fit_activated)
        self.menuitem_fit_width.connect("activate", self.on_menuitem_fit_width_activated)

        self.view = EvinceView.View()
        self.scrolledwindow.add(self.view)
        self.window.connect("destroy", Gtk.main_quit)
        self.window.show_all()

    def load(self, uri):
        try:
            EvinceDocument.init()
            self.document =  EvinceDocument.Document.factory_get_document(uri)
            self.model = EvinceView.DocumentModel.new_with_document(self.document)
            self.view.set_model(self.model)
            self.uri = uri
        except Exception as exception:
            print(exception)

    def on_button_prev_clicked(self, widget):
        self.view.previous_page()

    def on_button_next_clicked(self, widget):
        self.view.next_page()

    def on_menuitem_open_activated(self, widget):
        dialog = Gtk.FileChooserDialog("Please choose a document", self.window,
            Gtk.FileChooserAction.OPEN,
            (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
             Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
        dialog.set_default_size(800, 400)
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            self.load(dialog.get_uri())
        dialog.destroy()

    def on_menuitem_prev_activated(self, widget):
        self.view.previous_page()

    def on_menuitem_next_activated(self, widget):
        self.view.next_page()

    def on_menuitem_first_activated(self, widget):
        self.model.set_page(0)

    def on_menuitem_last_activated(self, widget):
        self.model.set_page(self.document.get_n_pages() - 1)

    def on_menuitem_inverted_colors_activated(self, widget):
        self.model.set_inverted_colors(widget.get_active())

    def on_menuitem_continuous_activated(self, widget):
        self.model.set_continuous(widget.get_active())

    def on_menuitem_dual_activated(self, widget):
        self.model.set_dual_page(widget.get_active())

    def on_menuitem_reload_activated(self, widget):
        self.document.load(self.uri)
        self.view.reload()

    def on_menuitem_zoom_in_activated(self, widget):
        self.model.set_sizing_mode(EvinceView.SizingMode.FREE)
        self.view.zoom_in()

    def on_menuitem_zoom_out_activated(self, widget):
        self.model.set_sizing_mode(EvinceView.SizingMode.FREE)
        self.view.zoom_out()

    def on_menuitem_best_fit_activated(self, widget):
        self.model.set_sizing_mode(EvinceView.SizingMode.BEST_FIT)

    def on_menuitem_fit_width_activated(self, widget):
        self.model.set_sizing_mode(EvinceView.SizingMode.FIT_WIDTH)

    def on_menuitem_odd_left_activated(self, widget):
        self.model.dual_odd_left = widget.get_active()

    def on_menuitem_help_activated(self, widget):
        subprocess.Popen(["yelp", "help:xreader"])

    def on_menuitem_about_activated(self, widget):
        aboutdialog = Gtk.AboutDialog()
        aboutdialog.set_program_name("Xreader")
        aboutdialog.set_version("XREADER_VERSION")
        aboutdialog.set_website("http://github.com/linuxmint/xreader")
        aboutdialog.set_website_label(_("Website"))
        aboutdialog.set_logo_icon_name("xreader")
        aboutdialog.set_transient_for(self.window)
        aboutdialog.run()
        aboutdialog.destroy()

    def on_menuitem_save_activated(self, widget):
        job = EvinceView.JobSave.new(self.document, self.uri, self.uri)
        job.run()

xreader = XReader()
xreader.load(sys.argv[1])
Gtk.main()
